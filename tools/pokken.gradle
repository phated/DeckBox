buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.pokemontcg:pokemon-tcg-sdk-kotlin:1.2.1'
        classpath 'com.squareup:kotlinpoet:1.8.0'
    }
}


import io.pokemontcg.Pokemon
import io.pokemontcg.model.Card
import io.pokemontcg.model.CardSet
import io.pokemontcg.requests.CardQueryBuilder
import io.pokemontcg.requests.CardSetQueryBuilder
import kotlin.Unit
import kotlin.jvm.functions.Function1

import java.text.SimpleDateFormat

/**
 * Custom task to output a random list of pokemon card images for use in [app/src/main/java/com/r0adkll/deckbuilder/util/CardUtils.kt]
 * that powers the scrolling marquee of cards on the login/setup screen for the user.
 */
task pokePrint {
    doLast {
        def poke = new Pokemon()
        def cards = poke.card().where(new Function1<CardQueryBuilder, Unit>() {
            @Override
            Unit invoke(CardQueryBuilder cardQueryBuilder) {
                cardQueryBuilder.pageSize = 1000
                cardQueryBuilder.setCode = "sm11|sm115|sm10"
                return null
            }
        }).all()

        Collections.shuffle(cards)
        for (Card card : cards) {
            println "\"${card.imageUrl}\","
        }
    }
}

task countExpansionGroups {
    doLast {
        def poke = new Pokemon()
        def sets = poke.set().where(new Function1<CardSetQueryBuilder, Unit>() {
            @Override
            Unit invoke(CardSetQueryBuilder cardSetQueryBuilder) {
                cardSetQueryBuilder.pageSize = 1000
                return null
            }
        }).all()

        println("Sets loaded: ${sets.size()}")

        def df = new SimpleDateFormat("MM/dd/yyyy", Locale.US)

        def firstCutoffDate = df.parse("02/09/2011")
        def secondCutoffDate = df.parse("11/02/2016")

        def sumPart1 = 0
        def sumPart2 = 0
        def sumPart3 = 0

        for (CardSet set : sets) {
            def setRD = df.parse(set.releaseDate)
            if (setRD.before(firstCutoffDate) || setRD == firstCutoffDate) {
                sumPart1 += set.totalCards
            } else if (setRD.after(firstCutoffDate) && (setRD.before(secondCutoffDate) || setRD == secondCutoffDate)) {
                sumPart2 += set.totalCards
            } else {
                sumPart3 += set.totalCards
            }
        }

        println("Part 1 == $sumPart1")
        println("Part 2 == $sumPart2")
        println("Part 3 == $sumPart3")
    }
}

task generateExpansionsTest {
    doLast {
        def poke = new Pokemon()
        def sets = poke.set().all()

        for (CardSet set : sets) {
            println "Expansion(\"${set.code}\", \"${set.ptcgoCode}\", \"${set.name}\", \"\", 0, true, true, \"\", \"\", null),"
        }
    }
}
